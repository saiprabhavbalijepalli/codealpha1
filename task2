Import Library functions for following requirements
(1)Visualization (2)Import Dataset (3)Split dataset (4)Create Support Vector Machine Model
import matplotlib.pyplot as plt
%matplotlib inline
import pylab as pl
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn import svm
Import Handwritten Digits-In-built Dataset from sklearn
#from sklearn.datasets import load_digits
digits = load_digits()
Display first sample digit from dataset as image
#import pylab as pl
pl.gray()
pl.matshow(digits.images[1])
pl.show()
digits.images[1]
Display 15 sample digits from dataset along with labels
images_and_labels = list(zip(digits.images, digits.target))
plt.figure(figsize=(5,5))
for index, (image, label) in enumerate(images_and_labels[:15]):
    plt.subplot(3, 5, index +1)
    plt.axis('off')
    plt.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
    plt.title('%i' % label)
Know the dataset.Check for number of digits available in dataset.
#Define variables
n_samples = len(digits.images)
print(n_samples)
Divide the dataset into input features(pixel) and output target label
X = digits.images.reshape((n_samples, -1)) #Input features are pixel
y = digits.target #Output are the target labels
Divide the dataset into training and testing sets by randomly splitting the images
#from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y)
print(X_train.shape)
print(X_test.shape)
Define Support Vector Classifier Model with linear kernel
#from sklearn import svm
model_linear = svm.SVC(kernel= 'linear', degree=3, gamma='scale')
model_linear.fit(X_train, y_train)
# predict
y_pred = model_linear.predict(X_test)
Evaluate the model using accuracy
model_linear.score(X_test, y_test)
Compare by creating another model with Kernel type RBF and evaluate for accuracy
model_RBF = svm.SVC(degree=3, gamma='scale', kernel='rbf')
model_RBF.fit(X_train, y_train)
# predict
y_pred2 = model_RBF.predict(X_test)
model_RBF.score(X_test, y_test)
Check for prediction from dataset
from sklearn.metrics import classification_report
predictions = model_linear.predict(X_test)
print(classification_report(y_test, predictions))
